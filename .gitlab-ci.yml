image: "node:lts-alpine"

stages:
#  - build
#  - test
  - deploy

# These folders are cached between builds
# https://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  key:
    files:
      - pnpm-lock.yaml
  paths:
    - node_modules/
    # Enables git-lab CI caching. Both .cache and public must be cached, otherwise builds will fail.
    - .cache/
    - public/
  policy: pull-push

before_script:
  - npm install -g pnpm

.build:install:
  stage: build
  script:
    - pnpm install
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - pnpm-lock.yaml
      when: always
    - if: "$CI_COMMIT_REF_NAME == 'master'"
      when: always

test:lint:
  stage: test
  script:
    - pnpm lint:gitlab
  artifacts:
    reports:
      codequality: gl-codequality.json
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "**/*.{js,ts,jsx,tsx}"
      when: always

.test:jest:
  stage: test
  script:
    - pnpm test:gitlab
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "**/*.{js,ts,jsx,tsx}"
      when: always

.test:gatsby:
  stage: test
  script:
    - ./node_modules/.bin/gatsby info
  only:
    - tags

.pages:
  stage: deploy
  needs:
    - build:install
  script:
    - export VERSION=$(cat .version)
    - sed -i "s/SITE_VERSION/$VERSION/g" src/constants.ts
    - sed -i "s/SITE_VERSION/$VERSION/g" static/humans.txt
    - sed -i "s/CURRENT_DATE/$(date '+%Y-%m-%d')/g" src/constants.ts
    - sed -i "s/CURRENT_DATE/$(date '+%Y-%m-%d')/g" static/humans.txt
    - pnpm build
  environment:
    name: production
    url: https://remnant.rkuiper.nl
  artifacts:
    paths:
      - public
  rules:
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == 'master'"
      when: always

create_release:
  stage: deploy
#  needs:
#    - pages
  before_script:
    - apk add curl
    - export VERSION=$(cat .version)
    - export PREVIOUS_VERSION=$(echo $VERSION | cut -d '.' -f 1,2)
    - export NEXT_VERSION=$(echo $VERSION | awk -F. '{print $NF+1}')
    - export MILESTONE_NAME="Release v$PREVIOUS_VERSION.$NEXT_VERSION"
    - export LATEST_SECTION=$(awk '/^## Version/{n++}{print > "section" n ".md"}' UPDATES.md && cat section1.md)
    - export ISSUE_TITLE="Ready release"
    - export ISSUE_DESCRIPTION="- [ ] Update version in .version\n- [ ] Add/update update log to UPDATES.md"
    - export ISSUE2_TITLE="Check & update packages"
  script:
    - >
      curl --request POST --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" --header "Content-Type: application/json" --data '{
        "tag_name": "$VERSION",
        "name": "Release $VERSION",
        "description": "Release $VERSION\n\n$LATEST_SECTION",
        "ref": "$CI_COMMIT_REF_NAME"
      }' "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"
    - >
      curl --request POST --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" --header "Content-Type: application/json" --data '{
        "title": "$MILESTONE_NAME"
      }' "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/milestones"
    - >
      export MILESTONE_ID=$(curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/milestones?search=$MILESTONE_NAME" | jq -r '.[0].id')
      curl --request POST --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" --header "Content-Type: application/json" --data '{
        "title": "$ISSUE_TITLE",
        "description": "$ISSUE_DESCRIPTION",
        "milestone_id": $MILESTONE_ID
      }' "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"
    - >
      curl --request POST --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" --header "Content-Type: application/json" --data '{
              "title": "$ISSUE2_TITLE",
              "description": "",
              "milestone_id": $MILESTONE_ID
            }' "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/issues"
  rules:
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == 'master'"
      when: always
